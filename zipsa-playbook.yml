- name: Zipsa Main Project CI/CD
  hosts: localhost
  connection: local
  become: true
  become_method: sudo
  vars_files: 
    - "vars/{{service_nm}}/{{env}}/params.yml"
  tasks: 
    - name: Init
      tags: [init]
      block: 
        - name: Make Shell Directory
          file: 
            path: "{{ dir.shell }}"
            state: directory
        - name: Move Jinja Files
          template:
            src: "shell/{{service_nm}}/{{env}}/push-ecr.sh.j2"
            dest: "{{ dir.shell }}/push-ecr.sh"
        - name: Change 'x' Permission
          shell: "chmod +x {{ dir.shell }}/push-ecr.sh"
    - name: Push Image
      tags: [push-image]
      block: 
        - name: Push Image
          shell: "{{ dir.shell }}/push-ecr.sh"
    - name: Create Task Definition
      tags: [create-task]
      block: 
        - name: Create Task Definition
          ecs_taskdefinition: 
            aws_access_key: "{{ aws.credentials.aws_access_key_id }}"
            aws_secret_key: "{{ aws.credentials.aws_secret_access_key }}"
            containers: 
            - name: "{{ aws.ecs.container_name }}"
              essential: true
              image: "{{ aws.ecr.url }}/{{ aws.ecr.name }}:{{image_name}}-{{env}}-{{image_tag}}"
              healthCheck: 
                command: 
                - "CMD-SHELL"
                - "curl -H 'Authorization: Bearer' http://localhost:8080/api/healthcheck/task"
                interval: 300
                timeout: 60
                retries: 3
                startPeriod: 300
              mountPoints: 
              - containerPath: "{{ aws.log_mount.container }}"
                readOnly: false
                sourceVolume: zipsa-mount
              portMappings: 
              - containerPort: "{{ port.service }}"
                hostPort: "{{ port.host }}"
                protocol: tcp
            family: "{{new_task_definition_name}}"
            cpu: "1024"
            memory: "512"
            launch_type: EC2
            region: "{{ aws.region }}"
            state: present
            volumes: 
              - name: zipsa-mount
                host: 
                  sourcePath: "{{ aws.log_mount.host }}"
    - name: Stop Service
      tags: [terminate-service]
      block:
        - name: Update Service
          ecs_service: 
            load_balancers:
              - containerPort: "{{ port.service }}"
                containerName: "{{ aws.ecs.container_name }}"
                targetGroupArn: "{{ aws.alb.target_group_arn }}"
            name: "{{ aws.ecs.service_name }}"
            aws_access_key: "{{ aws.credentials.aws_access_key_id }}"
            aws_secret_key: "{{ aws.credentials.aws_secret_access_key }}"
            state: present
            cluster: "{{ aws.ecs.cluster_name }}"
            launch_type: EC2
            region: "{{ aws.region }}"
            task_definition: "{{old_task_definition_name}}"
            desired_count: 0
        - name: Stop Service
          ecs_service: 
            load_balancers:
              - containerPort: "{{ port.service }}"
                containerName: "{{ aws.ecs.container_name }}"
                targetGroupArn: "{{ aws.alb.target_group_arn }}"
            name: "{{ aws.ecs.service_name }}"
            aws_access_key: "{{ aws.credentials.aws_access_key_id }}"
            aws_secret_key: "{{ aws.credentials.aws_secret_access_key }}"
            state: absent
            cluster: "{{ aws.ecs.cluster_name }}"
            launch_type: EC2
            region: "{{ aws.region }}"
        - name: Wait 300 Seconds
          wait_for: 
            timeout: 300
    - name: Create Service
      tags: [create-service]
      block:
        - name: Start Service
          ecs_service: 
            load_balancers:
              - containerPort: "{{ port.service }}"
                containerName: "{{ aws.ecs.container_name }}"
                targetGroupArn: "{{ aws.alb.target_group_arn }}"
            name: "{{ aws.ecs.service_name }}"
            aws_access_key: "{{ aws.credentials.aws_access_key_id }}"
            aws_secret_key: "{{ aws.credentials.aws_secret_access_key }}"
            state: present
            cluster: "{{ aws.ecs.cluster_name }}"
            launch_type: EC2
            region: "{{ aws.region }}"
            task_definition: "{{new_task_definition_name}}"
            desired_count: 1 
            scheduling_strategy: REPLICA
            deployment_configuration: 
              deployment_circuit_breaker: 
                enable: false
                rollback: false
              minimum_healthy_percent: 100
              maximum_percent: 200